import numpy as np
import matplotlib.pyplot as plt
import pyaudio
import time

sample_rate = 44100
pya = pyaudio.PyAudio()
stream = pya.open(
        format=pya.get_format_from_width(width=2),
        channels=1,
        rate=sample_rate,
        output=True)

frequencies = {'A': 440, 'B': 493.88, 'C': 523.25, 'D': 440, 'E': 440, 'F': 440}

channelBuffer = []


class synth:
    def __init__(self):
        self.osc = oscillator(0)
        self.adsr = ADSREnvelope()

    def play(self, freq):
        tone = self.osc.getToneData(freq)
        #adsrTones = self.adsr.getSounds(tone)


class oscillator:
    def __init__(self, form=0):
        self.form = form

    #TODO: Implement form
    def getToneData(self, freq, T):
        t = np.linspace(0, T, T * sample_rate, False)
        return np.sin(freq * 2 * np.pi * t)

    def from2Osc(self, wave1, wave2):
        pass

    def play(self, freq):
        newTone = sound(freq, self.getToneData(freq), self)
        newTone.play()

    def draw(self):
        plt.plot(t, self.getToneData(440), 'x')
        plt.show()


# A sample set
class sound:
    def __init__(self, data):
        self.data = data

    def play(self):
        return(self)


class ADSREnvelope:
    def __init__(self):
        self.Adur = 0.1
        self.Astart = 0
        self.Astop = 1
        self.Ddur = 0.1
        self.Dstop = 0.5
        self.Rdur = 0.1
        self.Rstop = 0.1
        self.enabled = True

    def getSounds(self, tone):
        pass


def playChannels():
    audio = 0
    for sound in channelBuffer:
        audio += sound.data * 32767 / np.max(np.abs(sound.data))
    audio /= len(channelBuffer)
    audio = audio.astype(np.int16)
    bytestream = audio.tobytes()
    stream.write(bytestream)


mySynth = synth()
mySynth.play(frequencies['A'])

while True:
    playChannels()

stream.stop_stream()
stream.close()

pya.terminate()
